# %% [markdown]
# 1. Что такое CPython и чем он отличается от Python?  
# CPython это одна из реализаций языка программирования Python, написанная на языке C. Отличие Python от СPython в том, что Python это язык программирования, а CPython это одна из его реализаций
#
# 3. Сколько существует реализаций Python, и какая из них самая популярная?  
# CPython, PyPy, Jython, IronPython, MicroPython, Stackless Python, Pyston. Самой популярной является реализация CPython
#
# 4. На каком языке написан CPython?  
# CPython написан на языке C
#
# 5. (опционально) Кто создал CPython?  
# Создатель Гвидо ван Россум
#
# 6. Почему Python считается быстрым, несмотря на то, что это интерпретируемый язык?  
# Из-за использования оптимизированных библиотек на C, перевод кода в байт-код
#
# 7. Напишите путь к Интерпретатору CPython на вашем компьютере  
# C:\Users\movch\AppData\Local\Programs\Python\Python311\python.exe
#
# 8. Что содержится в папке include в CPython?  
# В папке include содержатся заголовочные файлы, которые необходимы для разработки расширений, создания Python-модулей на C, а также для интеграции Python с другими приложениями на C
#
# 9. Где можно найти исходный код CPython дайте ссылку на репозиторий гитхаб  
# https://github.com/python/cpython
#
# 10. (опционально) Как работает интерпретатор CPython при выполнении кода?  
# При запуске кода интерпретатор сначала читает исходный код Python и выполняет его парсинг. Далее CPython компилирует программу в байт-код. Затем виртуальная машина Python выполняет байт-код, интерпретируя его и преобразуя в машинные инструкции, которые может понять процессор
#
# 11. Какая команда используется для запуска файла с помощью CPython?  
# cmd(консоль)
#
# 12. Можно ли запускать текстовые файлы через интерпретатор Python? Почему?  
# Можно, так как интерпретатору неважно какое расширение файла
#
# 13. Как указать путь к интерпретатору и файлу для выполнения кода?  
# Сначала указываем путь к интерпретатору, затем через пробел указываем путь к файлу
#
# 14. Чем PyPy отличается от CPython?  
# CPython является интерпретатором, который выполняет байт-код Python с помощью виртуальной машины Python.
# PyPy использует JIT-компиляцию (во время выполнения анализирует код, оптимизирует его и компилирует в машинный код)
#
# 15. Почему PyPy не может использоваться для всех проектов на Python?  
# PyPy новая реализация и пока не совместима со всеми проектами зависящими от C-расширений и сторонними библиотеками
#
# 16. Где можно скачать PyPy?  
# https://pypy.org/
#
# 17. Как установить PyPy после скачивания?  
# Распаковать скаченный архив и добавить путь к интерпретатору PyPy в переменных средах
#
# 18. Как запустить файл с помощью PyPy?  
# Сначала указываем путь к интерпретатору, затем через пробел указываем путь к файлу 
#
# 19. Почему PyPy выполняет код быстрее, чем CPython?  
# PyPy выполняет код быстрее, чем CPython, благодаря использованию JIT-компиляции

# %% [markdown]
# ## Практические задания

# %% [markdown]
# Задание 1: Поиск и установка CPython
#
# Проверьте, установлен ли CPython на вашем компьютере:
#     Используйте поиск в меню "Пуск" (Windows) или терминале (Linux/Mac).
#     Введите команду python --version или python3 --version в терминале.
# Если CPython не установлен, скачайте его с официального сайта Python https://www.python.org/downloads/ и установите.  
# ![image.png](attachment:image.png)

# %% [markdown]
# Задание 2: Исследование структуры CPython
#
# Найдите папку, где установлен Python (например, через команду which python в терминале или свойства ярлыка).
# Откройте папку include и изучите её содержимое. Какое количество файлов на C там есть? (73 файла на языке С)
# Перейдите на [GitHub-репозиторий CPython](https://github.com/python/cpython) и найдите файл README. Прочитайте информацию о проекте.

# %% [markdown]
# Задание 3: Запуск файла с помощью CPython
#
# Создайте текстовый файл example.txt с содержимым:
# print("Hello from CPython!")  
# ![image.png](attachment:image.png)  
# Запустите файл через команду python <путь_до_файла> (замените <путь_до_файла> на фактический путь к вашему файлу). Проверьте, что выводится на экран.  
# ![image-2.png](attachment:image-2.png)  
# Попробуйте изменить расширение файла на .py и повторите запуск.  
# ![image-3.png](attachment:image-3.png)

# %% [markdown]
# Задание 4: Установка и использование PyPy
#
# Перейдите на [официальный сайт PyPy](https://www.pypy.org/) и скачайте подходящую версию для вашей операционной системы.
# Распакуйте скачанный архив в удобное место.
# Создайте файл example_pypy.py с кодом: print("Hello from pypy!")  
# ![image.png](attachment:image.png)  
# Запустите файл через PyPy
# pypy <путь_до_файла> (замените <путь_до_файла> на фактический путь к вашему файлу).
# Проверьте, что выводится на экран. Попробуйте изменить расширение файла на .py и повторите запуск.
# ![image-2.png](attachment:image-2.png)

# %% [markdown]
# Задание 5: Сравнение производительности CPython и PyPy
# Создайте файл performance_test.py с кодом:  
# ![image.png](attachment:image.png)  
# Запустите этот файл сначала через CPython, а затем через PyPy. Запишите результаты времени выполнения для обоих интерпретаторов.  
# ![image-2.png](attachment:image-2.png)  
# Сделайте вывод о разнице в производительности.  
#
# PyPy значительно быстрее CPython в данном тесте. Время выполнения кода через PyPy составило всего 0.041 секунды, в то время как через CPython 1.819 секунды. Причина такого большого различия в производительности заключается в том, что PyPy использует JIT-компиляцию, которая позволяет ускорить выполнение кода, преобразуя часто исполняемые участки в машинный код, что значительно ускоряет выполнение вычислительных операций. CPython, в свою очередь, является интерпретатором и не использует JIT, что делает его медленнее для вычислительно интенсивных задач.
